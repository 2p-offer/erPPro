package com.warship.test.leedcode.daily._21_04;

/**
 * 213. 打家劫舍 II
 * 你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 围成一圈 ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警 。
 * 给定一个代表每个房屋存放金额的非负整数数组，计算你 在不触动警报装置的情况下 ，能够偷窃到的最高金额。
 * <p>
 * 示例 1：
 * 输入：nums = [2,3,2]
 * 输出：3
 * 解释：你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。
 * <p>
 * 示例 2：
 * 输入：nums = [1,2,3,1]
 * 输出：4
 * 解释：你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。
 * 偷窃到的最高金额 = 1 + 3 = 4 。
 * <p>
 * 示例 3：
 * 输入：nums = [0]
 * 输出：
 * <p>
 * 提示：
 * 1 <= nums.length <= 100
 * 0 <= nums[i] <= 1000
 */
public class _4_15_RobII {


    /**
     * 我们假设  f(i,j) 为 num[i] - num[j] 段，可以盗取的最大值
     * 则 题目球 f(0,nums.length) 的值
     * 转移方程
     * length = nums.length
     * f(0,length -1) = Max(nums[0] + f(2,length-2),nums[1] + f(3,length-1),num[2]+f(4,length-1));
     * 边界值：
     * f(0,0) = nums[0];
     * f(0,1) = Max(nums[0],nums[1]);
     * f(0,2) = Max(nums[0],nums[1],nums[2]);
     * @param nums
     * @return
     */
    public int rob(int[] nums) {
        return 0;
    }
}
